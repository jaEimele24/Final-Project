from ggame import App, RectangleAsset, ImageAsset, SoundAsset
from ggame import LineStyle, Color, Sprite, Sound, Frame
import math, random
from time import time
civname=input("enter your civilization's name here: ")


class CivGame(App):
    def __init__(self):
        super().__init__()
        black = Color(0x458B00,1)
        noline = LineStyle(0, black)
        bg_asset = RectangleAsset(self.width, self.height, noline, black)
        bg = Sprite(bg_asset, (0,0))
        self.farmland=float(input("enter the initial amount of airable land here: "))
        self.forests=float(input("enter the initialtamount of forests here: "))
        self.k=0
        pop=float(input("enter the initial population here,  at least 10 is optimal: "))
        self.pop=Population(pop, self.farmland, self.k, self.forests)
    def step(self):
        self.pop.step()
#Population Dynamics
class Population:
    def __init__(self, pop, farmland, k, forests):
        self.pop=pop
        self.farmland=farmland
        self.k=k
        self.forests=forests
    def step(self):
        self.k=self.k+1
        if self.k==1:
            labor=self.pop
            woodcutters=.1*labor
            builders=.1*labor
            if self.forests>0:
                wood=woodcutters*.1*self.forests
                self.forests=self.forests-(wood*.5)
            if self.forests==0 or self.forests<0:
                wood=0
            houses=wood*builders
            fooduse=4*self.pop
            if (self.pop*.2)<self.farmland:
                food=self.farmland*.8*self.pop-fooduse
            if (self.pop*.2)>self.farmland:
                food=4*self.pop
            housecap=houses*10
            foodcap=food
            if self.pop<foodcap and self.pop<housecap:
                self.pop=self.pop+(.2*(self.pop))
            elif self.pop>foodcap:
                self.pop=selfpop-(self.pop-foodcap)
            else: 
                self.pop=self.pop
            g=self.pop
            print("The population of your civilization is {0}".format(round(g, 0)))
            self.k=self.k-16


    


myapp = CivGame()
myapp.run()

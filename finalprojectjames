from ggame import App, RectangleAsset, ImageAsset, SoundAsset, PolygonAsset
from ggame import LineStyle, Color, Sprite, Sound, Frame
import math, random
from time import time
civname=input("enter your civilization's name here: ")

listtrees=[]
class CivGame(App):
    def __init__(self):
        super().__init__()
        black = Color(0x458B00,1)
        noline = LineStyle(0, black)
        bg_asset = RectangleAsset(self.width, self.height, noline, black)
        bg = Sprite(bg_asset, (0,0))
        self.farmland=float(input("enter the initial amount of airable land here: "))
        self.forests=int(input("enter the initial amount of forests here: "))
        for i in range(0,(self.forests+1)):
            tree((random.randint(0,200), random.randint(0,200)))
            i=tree((random.randint(0,200), random.randint(0,200)))
            listtrees.append(i)
        self.k=0
        self.metaldeposits=float(input("enter the amount of usable metals deposits there are: "))
        self.initialtechlevel=input("enter the initial tech level here, either ancient, classical, mideval, renessance, industrial, modern, or future: ")
        pop=float(input("enter the initial population here,  at least 10 is optimal: "))
        self.techlevel=self.initialtechlevel
        self.pop=Population(pop, self.farmland, self.k, self.forests, self.initialtechlevel, self.metaldeposits, self.techlevel)
    def step(self):
        self.pop.step()
#Population Dynamics
class Population:
    def __init__(self, pop, farmland, k, forests, initialtechlevel, metaldeposits, techlevel):
        self.pop=pop
        self.farmland=farmland
        self.k=k
        self.forests=forests
        self.initialtechlevel=initialtechlevel
        self.metaldeposits=metaldeposits
        self.techlevel=techlevel
        self.techadvanceprogress=0
        self.houses=0
        self.tools=0
        self.barrels=0
        self.ore=0
        self.consumergoods=0
        self.ingots=0
        self.weapons=0
        self.wood=0
        self.betterhouses=0
        self.wealth=0
    def step(self):
        self.k=self.k+1
        if self.k==1:
            if self.initialtechlevel=="ancient" and self.techlevel=="ancient":
                labor=self.pop
                woodcutters=.1*labor
                builders=.1*labor
                farmers=.8*labor
                if self.forests==0 or self.forests<0:
                    newwood=0
                if self.forests>0:
                    newwood=int(5*woodcutters)
                    self.forests=int(self.forests-(newwood*.2))
                    for i in range(0,int(self.forests-(newwood*.2))):
                        for u in listtrees:
                            u.destroy()
                    self.wood=self.wood+newwood
                self.forests=self.forests+(self.forests*.002)+2
                for i in range (0,(self.forests+self.forests*.002)+3):
                    tree((random.randint(0,200), random.randint(0,200)))
                print(self.forests)
                if self.wood>0 and self.houses<(self.pop*1.2):
                    newhouses=builders
                    self.wood=self.wood-(newhouses*10)
                    self.houses=self.houses+newhouses
                    if newhouses>0:
                        for i in range(0,int(newhouses)):
                            House((random.randint(400,500), random.randint(200,300)))
                fooduse=self.pop
                if (self.pop*.2)<self.farmland:
                    food=1.4*farmers
                if (self.pop*.2)>self.farmland:
                    food=farmers
                    #print("ohno")
                housecap=7*self.houses
                foodcap=food
                if self.pop<foodcap and self.pop<housecap:
                    self.pop=self.pop+(.1*(self.pop))
                elif self.pop>foodcap:
                    self.pop=self.pop-(self.pop-foodcap)
                else: 
                    self.pop=self.pop
                g=self.pop
                inventors=random.randint(1,10)*(.01*self.pop)+(.0005*(food-fooduse))
                techadvancechance=0
                print("The number of forests is {0}".format(round(self.forests,0)))
                print("The housecap of your civilization is {0}".format((housecap)))
                print("The population of your civilization is {0}".format(round(g, 0)))
                print("The food output of your civilization is {0}".format(round(food,0)))
                print("The food use of your civilization is {0}".format(round(fooduse,0)))
                if self.initialtechlevel=="ancient" and inventors>10:
                    techadvancechance=random.randint(0,10)*inventors*.4
                    self.techadvanceprogress=self.techadvanceprogress+.025*(techadvancechance)
                    #print(self.techadvanceprogress)
                    if self.techadvanceprogress>=10:
                        print("eureka")
                        self.techlevel="classical"

            if self.techlevel=="classical":
                labor=self.pop
                miners=.04*labor
                smelters=.004*labor
                forgers=.005*labor
                farmers=.8*labor
                builders=.075*labor
                woodcutters=.073*labor
                merchants=.001*labor
                craftsmen=.002*labor
                self.forests=self.forests+(self.forests*.1)+(2*random.randint(1,2))
                newbetterhouses=0
                if self.forests==0 or self.forests<0:
                    newwood=0
                    print("Ispeakforthetrees")
                if self.forests>0:
                    if self.forests-(woodcutters/7)>0:
                        newwood=7*woodcutters
                    if self.forests-(woodcutters/7)<0:
                        newwood=self.forests*7
                    if self.forests-(newwood/7)>0:
                        self.forests=self.forests-(newwood/7)
                    if self.forests-(newwood/7)<0:
                        self.forests=0
                    self.farmland=self.farmland+(self.forests-(self.forests-(newwood*.5)))
                    self.wood=self.wood+newwood
                    print(newwood)
                    print(self.wood)
                if self.metaldeposits > 0:
                    newore=miners*11
                    self.metaldeposits=self.metaldeposits-(newore*.1)
                    self.ore=self.ore+newore
                if self.metaldeposits<0:
                    newore=0
                if self.ore>0:
                    newingots=.5*self.ore*((20*smelters)/self.ore)
                    self.ingots=self.ingots+newingots
                    ingotmarker=self.ingots
                if self.ingots>0:
                    newtools=.2*self.ingots*((20*craftsmen)/(.2*self.ingots))
                    self.tools=self.tools+newtools
                    self.ingots=self.ingots-(.2*ingotmarker)
                if self.ingots>0:
                    newbarrels=.2*self.ingots*((20*craftsmen)/(.2*self.ingots))
                    self.barrels=self.barrels+newbarrels
                    self.ingots=self.ingots-(.2*ingotmarker)
                if self.ingots>0:
                    newconsumergoods=.2*self.ingots*((20*craftsmen)/(.2*self.ingots))
                    self.comsumergoods=self.consumergoods+newconsumergoods
                    self.ingots=self.ingots-(.2*ingotmarker)
                if self.ingots>0 and self.wood>0:
                    newbetterhouses=.02*(builders/(.1*(self.ingots+.00001)))*(builders/(.1*(self.wood+.00001)))
                    self.ingots=self.ingots-(.2*ingotmarker)
                    self.betterhouses=self.betterhouses+newbetterhouses
                if self.ingots>0:
                    newweapons=.2*self.ingots*((20*craftsmen)/(.2*self.ingots))
                    self.weapons=self.weapons+newweapons
                self.forests=self.forests+(self.forests*.002)+2
                if self.wood>0 and self.houses<(self.pop*1.2):
                    newhouses=builders*1.15
                    if newhouses>0:
                        for i in range(0,int(newhouses)):
                            House((random.randint(200,700), random.randint(0,500)))
                    self.wood=self.wood-(newhouses*10)
                    self.houses=self.houses+newhouses+(1.5*self.betterhouses)
                if self.wood<0 or self.wood==0 or self.houses>(self.pop*1.2):
                    newhouses=0
                fooduse=4*farmers
                if (self.pop*.1)<self.farmland:
                    food=farmers*((3/(1+5*(2.718)**(-.5*((10*self.tools)/farmers))))+1)
                    tooluse=.9*newtools
                if (self.pop*.1)>self.farmland:
                    food=farmers
                    print("pleasegodnoyouroneofthemanr'tyou")
                    self.tools=self.tools-tooluse
                diplomaticrelations=random.randint(1,5)
                trade=self.comsumergoods*(10*merchants)+self.weapons*diplomaticrelations+self.barrels+self.tools+(.1*food)+(.1*newwood)+(.1*newingots)
                economicoutput=(food+newwood+newore+(10*newbarrels)+(10*newtools)+(20*newhouses)+(30*newbetterhouses)+(10*newconsumergoods)+(10*newweapons))
                economicoutputpercapita=economicoutput/self.pop
                newwealth=economicoutput*(1.1/(1+(2.718)**(-.5*trade))+.45)
                qualityoflife=newwealth/self.pop
                self.wealth=self.wealth+newwealth
                housecap=7*self.houses
                foodcap=food
                if self.pop<foodcap and self.pop<housecap:
                    popgrowth=(.1*(self.pop))
                    if (popgrowth+self.pop)>housecap:
                        self.pop=self.pop+((self.pop+popgrowth)-housecap)
                    elif (popgrowth+self.pop)<housecap:
                        self.pop=self.pop+popgrowth
                elif self.pop>foodcap:
                    self.pop=self.pop-(self.pop-foodcap)
                elif self.pop>housecap: 
                    self.pop=self.pop
                    print("feels like a tokyo subway")
                g=self.pop
                inventors=random.randint(1,10)*(.02*self.pop)+(.0005*(food-fooduse))
                techadvancechance=0
                
                print("The housecap of your civilization is {0}".format((housecap)))
                print("The population of your civilization is {0}".format(round(g, 0)))
                print("The food output of your civilization is {0}".format(round(food,0)))
                print("The wealth of your civilization is {0}".format(round(self.wealth,0)))
                print("The quality of life of your civilization is[0]".format(round(qualityoflife,0)))
                #print("The food use of your civilization is {0}".format(round(fooduse,0)))
                if self.initialtechlevel=="ancient" and inventors>10:
                    techadvancechance=random.randint(0,10)*inventors*.4
                    self.techadvanceprogress=self.techadvanceprogress+.025*(techadvancechance)
                    #print(self.techadvanceprogress)
                    if self.techadvanceprogress>=300:
                        print("eureka")
                        self.techlevel="mideval"


                    
                    
                    

            self.k=self.k-8
class House(Sprite):
    brown=Color(0x9C661F,1)
    houseline=LineStyle(2,brown)
    house_asset=RectangleAsset(10, 10, houseline, brown)
    def __init__(self, position):
        super().__init__(House.house_asset, position)
class tree(Sprite):
    green=Color(0x006400,1)
    treeline=LineStyle(1,green)
    tree_asset=PolygonAsset(([(0,20),(5,10),(10,20)]), treeline, green)
    def __init__(self, position):
        super().__init__(tree.tree_asset, position)
    

            
            
    



    


myapp = CivGame()
myapp.run()
